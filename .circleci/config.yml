version: 2
jobs:
  # Build-Only Job
  build:
    working_directory: ~/curt-labs/API
    parallelism: 1
    environment:
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      PROD_PROJECT_NAME: curt-services
      PROD_CLUSTER_NAME: goapi
      PROD_IMAGE: gcr.io/curt-services/goapi
      PROD_ZONE: us-central1-a
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: circleci/golang
    steps:
    - checkout
    - run:
        name: Create Artifact and Test Result Placeholders
        command: mkdir -p ${CIRCLE_ARTIFACTS} ${CIRCLE_TEST_REPORTS}
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v2-dep-{{ .Branch }}-
        # Default branch if not
        - v2-dep-goapi-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v2-dep-
    - run:
        name: Get Dependencies
        command: go get -t -d -v ./...
    - run:
        name: Build
        command: go build -v
    # Test
    - run:
        name: Vet the Build
        command: |
          echo 'export CIRCLE_TEST_REPORTS="$CIRCLE_TEST_REPORTS"' >> $BASH_ENV
          echo 'export DOCKER_IMAGE="$DOCKER_IMAGE"' >> $BASH_ENV
          echo 'export CIRCLE_ARTIFACTS="$CIRCLE_ARTIFACTS"' >> $BASH_ENV
          go vet -v &> $CIRCLE_TEST_REPORTS/$DOCKER_IMAGE-test-results.txt
    # Save dependency cache
    - save_cache:
        key: v2-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - /go/src
        - vendor/bundle
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results

  # Deploy to Staging Job
  deploy-staging:
    working_directory: ~/curt-labs/API
    parallelism: 1
    environment:
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CONTAINER_NAME: goapi
      DEPLOYMENT: api-goapi
      STAGE_PROJECT_NAME: unicorn-attack
      STAGE_CLUSTER_NAME: goapi-staging
      STAGE_IMAGE: gcr.io/unicorn-attack/goapi
      STAGE_ZONE: us-central1-a
    docker:
    - image: circleci/golang
    - image: google/cloud-sdk
    steps:
    - checkout
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v2-dep-{{ .Branch }}-
        # Default branch if not
        - v2-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v2-dep-
    - run: go get -t -d -v ./...
    - run: go build -v
    - setup_remote_docker:
        docker_layer_caching: true
    # Update tools
    # Add the Cloud SDK distribution URI as a package source
    - run: echo "deb http://packages.cloud.google.com/apt cloud-sdk-jessie main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    # Import the Google Cloud Platform public key
    - run: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    # Update the package list and install the Cloud SDK
    - run: sudo apt-get update && sudo apt-get install google-cloud-sdk kubectl
    # Setup ENV Variables and Service Account
    - run: echo 'export DEPLOYMENT_REVISION=$CIRCLE_BUILD_NUM' >> $BASH_ENV
    - run: gcloud version

    - run: echo $CURT_SERVICES_SA | base64 --decode -i > ${HOME}/prod-client-secret.json
    - run: echo $STAGE_CLIENT_SECRET | base64 --decode -i > ${HOME}/stage-client-secret.json
    - run: sudo docker build -t ${STAGE_IMAGE}:$CIRCLE_SHA1 .
    - run: sudo docker tag ${STAGE_IMAGE}:$CIRCLE_SHA1 ${STAGE_IMAGE}:latest
    - run: sudo /opt/google-cloud-sdk/bin/gcloud config set container/use_client_certificate True
    - run: sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/stage-client-secret.json
    - run: sudo /opt/google-cloud-sdk/bin/gcloud config set project $STAGE_PROJECT_NAME
    - run: sudo /opt/google-cloud-sdk/bin/gcloud --quiet config set container/cluster $STAGE_CLUSTER_NAME
    - run: sudo /opt/google-cloud-sdk/bin/gcloud config set compute/zone $STAGE_ZONE
    - run: sudo /opt/google-cloud-sdk/bin/gcloud --quiet container clusters get-credentials $STAGE_CLUSTER_NAME
    - run: sudo /opt/google-cloud-sdk/bin/gcloud docker -- push ${STAGE_IMAGE}
    - run: sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
    - run: kubectl set image deployment/${DEPLOYMENT} ${CONTAINER_NAME}=${STAGE_IMAGE}:$CIRCLE_SHA1
    # Save dependency cache
    - save_cache:
        key: v2-dep-{{ .Branch }}-{{ epoch }}
        paths:
        - /go/src
        - vendor/bundle
        - "/go/pkg"
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results

# Workflows
workflows:
  version: 2
  build-only-workflow:
    jobs:
    - build:
        filters:
          branches:
            ignore:
            - goapi
            - staging

  deploy-production-workflow:
    jobs:
    - build:
        filters:
          branches:
            only:
            - goapi
    - deploy-production:
        requires:
        - build
        filters:
          branches:
            only:
            - goapi

  deploy-staging-workflow:
    jobs:
    - build:
        filters:
          branches:
            only:
            - staging
    - deploy-staging:
        requires:
        - build
        filters:
          branches:
            only:
            - staging
